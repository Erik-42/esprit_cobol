[
	{
		"id": 9,
		"title": "Les instructions du COBOL",
		"subTitle": "Comprendre les instructions essentielles pour écrire un programme COBOL",
		"intro": "Le COBOL est un langage qui repose sur des instructions simples mais puissantes, permettant de manipuler des données, contrôler le flux d'exécution et interagir avec l'utilisateur. Voici un aperçu des instructions de base les plus utilisées dans un programme COBOL.",
		"article": "### 1. **IDENTIFICATION DIVISION**\nCette instruction est utilisée pour donner un nom au programme COBOL. C'est la première division de tout programme COBOL et elle est obligatoire.\n\n**Exemple :**\n```\nIDENTIFICATION DIVISION.\nPROGRAM-ID. ExempleProgramme.\n```\nElle définit les métadonnées de base du programme, comme son nom.\n\n### 2. **ENVIRONMENT DIVISION**\nL'`ENVIRONMENT DIVISION` permet de spécifier l'environnement d'exécution du programme, comme les périphériques d'entrée et de sortie, les fichiers externes, etc.\n\n**Exemple :**\n```\nENVIRONMENT DIVISION.\nINPUT-OUTPUT SECTION.\nFILE-CONTROL.\n   SELECT fichier ASSIGN TO 'fichier.txt'.\n```\nElle lie le programme aux ressources externes telles que les fichiers.\n\n### 3. **DATA DIVISION**\nLa `DATA DIVISION` est utilisée pour déclarer toutes les variables et structures de données que le programme va utiliser. Elle définit les types de données, leurs formats et leurs longueurs.\n\n**Exemple :**\n```\nDATA DIVISION.\nWORKING-STORAGE SECTION.\n01 CLIENT-NAME PIC X(30).\n01 CLIENT-AGE PIC 99.\n```\nDans cet exemple, deux variables sont déclarées : `CLIENT-NAME` (chaîne de 30 caractères) et `CLIENT-AGE` (nombre entier de deux chiffres).\n\n### 4. **PROCEDURE DIVISION**\nLa `PROCEDURE DIVISION` contient la logique du programme, c'est là que les instructions réelles sont exécutées. Cette section peut contenir des commandes comme `DISPLAY`, `ACCEPT`, `IF`, etc.\n\n**Exemple :**\n```\nPROCEDURE DIVISION.\n   DISPLAY 'Entrez le nom du client :'.\n   ACCEPT CLIENT-NAME.\n   DISPLAY 'Le nom du client est : ' CLIENT-NAME.\n```\nIci, `DISPLAY` est utilisé pour afficher un message, et `ACCEPT` est utilisé pour capturer une entrée utilisateur.\n\n### 5. **DISPLAY**\nL'instruction `DISPLAY` est utilisée pour afficher du texte ou des valeurs à l'écran. Elle est souvent utilisée pour fournir des informations à l'utilisateur.\n\n**Exemple :**\n```\nDISPLAY 'Nom du client : ' CLIENT-NAME.\n```\nElle affiche la valeur de la variable `CLIENT-NAME` à l'utilisateur.\n\n### 6. **ACCEPT**\nL'instruction `ACCEPT` permet de capturer une entrée de l'utilisateur et de la stocker dans une variable.\n\n**Exemple :**\n```\nACCEPT CLIENT-NAME.\n```\nCette instruction permet à l'utilisateur de saisir une valeur, qui sera ensuite stockée dans la variable `CLIENT-NAME`.\n\n### 7. **IF / ELSE**\nL'instruction `IF` est utilisée pour tester une condition et exécuter un bloc d'instructions en fonction de la véracité de cette condition. Il peut être accompagné de `ELSE` pour spécifier un autre bloc d'instructions si la condition n'est pas remplie.\n\n**Exemple :**\n```\nIF CLIENT-AGE > 18 THEN\n   DISPLAY 'Adulte'.\nELSE\n   DISPLAY 'Mineur'.\nEND-IF.\n```\nCette condition vérifie si `CLIENT-AGE` est supérieur à 18 et affiche un message en conséquence.\n\n### 8. **PERFORM**\nL'instruction `PERFORM` est utilisée pour exécuter un bloc d'instructions, qu'il soit défini sous forme de sous-programme ou d'instruction en ligne. Elle permet de répéter des actions ou de structurer le code de manière modulaire.\n\n**Exemple :**\n```\nPERFORM AfficherMessage.\n```\nCela appelle une procédure nommée `AfficherMessage` qui contient une séquence d'instructions.\n\n### 9. **EVALUATE**\nL'instruction `EVALUATE` permet de tester plusieurs conditions à la fois, de manière plus concise qu'avec des `IF` imbriqués. Elle fonctionne de manière similaire au `switch` des autres langages de programmation.\n\n**Exemple :**\n```\nEVALUATE CLIENT-AGE\n   WHEN 18 TO 30\n      DISPLAY 'Jeune adulte'.\n   WHEN 31 TO 50\n      DISPLAY 'Adulte'.\n   WHEN OTHER\n      DISPLAY 'Senior'.\nEND-EVALUATE.\n```\nCette instruction évalue `CLIENT-AGE` et affiche un message en fonction de la tranche d'âge.\n\n### 10. **STOP RUN**\nL'instruction `STOP RUN` marque la fin du programme. Elle indique au système que l'exécution du programme est terminée.\n\n**Exemple :**\n```\nSTOP RUN.\n```\nCette instruction termine l'exécution du programme COBOL.\n\n### Conclusion\nLes instructions du COBOL sont conçues pour être simples et lisibles, ce qui permet aux programmeurs de maintenir facilement le code. Grâce à des instructions telles que `DISPLAY`, `ACCEPT`, `IF`, et `PERFORM`, le COBOL permet de traiter des données, d'interagir avec l'utilisateur et de structurer la logique du programme.",
		"conclusions": "Les instructions du COBOL permettent de créer des programmes clairs et structurés. Que ce soit pour l'affichage de données, la gestion des entrées ou la manipulation des variables, ces instructions offrent des outils puissants pour écrire des programmes efficaces et faciles à maintenir.",
		"fin": "Ainsi, comprendre et maîtriser les instructions COBOL permet de créer des applications robustes et performantes, adaptées aux besoins des entreprises, tout en garantissant une lisibilité optimale du code."
	},

	{
		"id": 2,
		"title": "Les verbes du COBOL",
		"subTitle": "Comprendre les verbes utilisés pour écrire un programme COBOL",
		"intro": "Les verbes en COBOL sont des mots-clés qui spécifient les actions à effectuer dans le programme. Ces verbes permettent de manipuler des données, interagir avec l'utilisateur, effectuer des calculs, et contrôler le flux d'exécution. Voici une liste des verbes les plus couramment utilisés en COBOL et leur explication.",
		"article": "### 1. **DISPLAY**\nLe verbe `DISPLAY` permet d'afficher des données à l'écran ou d'autres périphériques de sortie.\n\n**Exemple :**\n```\nDISPLAY 'Nom du client : ' CLIENT-NAME.\n```\nCet exemple affiche la valeur de la variable `CLIENT-NAME` à l'utilisateur.\n\n### 2. **ACCEPT**\nLe verbe `ACCEPT` permet de capturer une entrée de l'utilisateur et de la stocker dans une variable.\n\n**Exemple :**\n```\nACCEPT CLIENT-NAME.\n```\nDans cet exemple, l'entrée de l'utilisateur est stockée dans la variable `CLIENT-NAME`.\n\n### 3. **ADD**\nLe verbe `ADD` permet d'effectuer une addition entre des variables ou des constantes et de stocker le résultat dans une variable.\n\n**Exemple :**\n```\nADD 5 TO CLIENT-AGE GIVING NEW-AGE.\n```\nIci, le nombre 5 est ajouté à la variable `CLIENT-AGE` et le résultat est stocké dans `NEW-AGE`.\n\n### 4. **SUBTRACT**\nLe verbe `SUBTRACT` est utilisé pour soustraire des valeurs.\n\n**Exemple :**\n```\nSUBTRACT 3 FROM CLIENT-AGE GIVING NEW-AGE.\n```\nCet exemple soustrait 3 de `CLIENT-AGE` et stocke le résultat dans `NEW-AGE`.\n\n### 5. **MULTIPLY**\nLe verbe `MULTIPLY` permet de multiplier des variables ou des constantes.\n\n**Exemple :**\n```\nMULTIPLY CLIENT-AGE BY 2 GIVING DOUBLE-AGE.\n```\nIci, la valeur de `CLIENT-AGE` est multipliée par 2 et le résultat est stocké dans `DOUBLE-AGE`.\n\n### 6. **DIVIDE**\nLe verbe `DIVIDE` permet de diviser des valeurs.\n\n**Exemple :**\n```\nDIVIDE CLIENT-AGE BY 2 GIVING HALF-AGE.\n```\nCet exemple divise `CLIENT-AGE` par 2 et le résultat est stocké dans `HALF-AGE`.\n\n### 7. **MOVE**\nLe verbe `MOVE` permet de transférer des valeurs d'une variable à une autre.\n\n**Exemple :**\n```\nMOVE CLIENT-NAME TO NEW-NAME.\n```\nIci, la valeur de `CLIENT-NAME` est copiée dans la variable `NEW-NAME`.\n\n### 8. **IF**\nLe verbe `IF` permet de tester une condition et d'exécuter des instructions en fonction du résultat de ce test.\n\n**Exemple :**\n```\nIF CLIENT-AGE > 18 THEN\n   DISPLAY 'Adulte'.\nELSE\n   DISPLAY 'Mineur'.\nEND-IF.\n```\nCet exemple teste si `CLIENT-AGE` est supérieur à 18 et affiche un message en fonction du résultat.\n\n### 9. **PERFORM**\nLe verbe `PERFORM` permet d'exécuter une procédure ou une série d'instructions. Il peut être utilisé pour exécuter des sous-programmes ou pour effectuer des actions répétitives.\n\n**Exemple :**\n```\nPERFORM AfficherMessage.\n```\nCela appelle la procédure `AfficherMessage` définie dans une autre section du programme.\n\n### 10. **EVALUATE**\nLe verbe `EVALUATE` permet de tester plusieurs conditions simultanément, comme un `switch` dans d'autres langages.\n\n**Exemple :**\n```\nEVALUATE CLIENT-AGE\n   WHEN 18 TO 30\n      DISPLAY 'Jeune adulte'.\n   WHEN 31 TO 50\n      DISPLAY 'Adulte'.\n   WHEN OTHER\n      DISPLAY 'Senior'.\nEND-EVALUATE.\n```\nCet exemple évalue `CLIENT-AGE` et affiche un message en fonction de la tranche d'âge.\n\n### 11. **STOP RUN**\nLe verbe `STOP RUN` marque la fin de l'exécution du programme. Il indique au système que le programme est terminé.\n\n**Exemple :**\n```\nSTOP RUN.\n```\nCela arrête l'exécution du programme COBOL.\n\n### Conclusion\nLes verbes COBOL sont les éléments essentiels permettant d'effectuer des actions variées dans un programme. Que ce soit pour manipuler des données, interagir avec l'utilisateur ou contrôler le flux d'exécution, ces verbes offrent une grande flexibilité dans la programmation COBOL.",
		"conclusions": "Les verbes du COBOL permettent de définir clairement les actions à effectuer sur les données et dans le programme. Ils sont conçus pour être simples et lisibles, ce qui facilite la maintenance du code et la compréhension des programmes COBOL.",
		"fin": "Ainsi, maîtriser l'utilisation des verbes en COBOL permet de développer des programmes puissants et modulaires, tout en garantissant une lisibilité optimale du code."
	},

	{
		"id": 3,
		"title": "Les variables du COBOL",
		"subTitle": "Comprendre les variables utilisées dans un programme COBOL",
		"intro": "Les variables en COBOL sont utilisées pour stocker des valeurs, que ce soit des données numériques, des chaînes de caractères ou d'autres types de données. Elles sont déclarées dans la section `Data Division` et ont des types bien définis qui déterminent leur comportement dans le programme. Voici une liste des types de variables en COBOL et leur explication.",
		"article": "### 1. **Variable numérique**\nLes variables numériques sont utilisées pour stocker des valeurs numériques, comme des entiers ou des nombres à virgule flottante. En COBOL, les variables numériques sont déclarées avec des types comme `PIC 9` pour les entiers ou `PIC 9V99` pour les nombres décimaux.\n\n**Exemple :**\n```\n01 CLIENT-AGE PIC 9(2).\n01 SALAIRE PIC 9(5)V99.\n```\nIci, `CLIENT-AGE` peut contenir un entier à 2 chiffres, et `SALAIRE` peut contenir un nombre décimal avec 2 décimales.\n\n### 2. **Variable alphanumérique**\nLes variables alphanumériques sont utilisées pour stocker des chaînes de caractères. Elles sont déclarées avec le type `PIC X`, suivi d'un nombre indiquant la longueur de la chaîne.\n\n**Exemple :**\n```\n01 CLIENT-NAME PIC X(30).\n01 ADRESSE PIC X(50).\n```\nDans cet exemple, `CLIENT-NAME` peut contenir jusqu'à 30 caractères, et `ADRESSE` peut contenir jusqu'à 50 caractères.\n\n### 3. **Variable date**\nEn COBOL, les dates sont stockées sous forme de chaînes de caractères ou de nombres. Pour manipuler des dates, on peut utiliser des variables avec des formats spécifiques comme `PIC 9(8)` ou `PIC X(10)`.\n\n**Exemple :**\n```\n01 DATE-DEBUT PIC 9(8).\n```\nDans cet exemple, `DATE-DEBUT` stocke une date sous forme de huit chiffres (année, mois, jour).\n\n### 4. **Variable conditionnelle**\nLes variables conditionnelles sont utilisées pour stocker des valeurs qui sont testées dans des structures conditionnelles comme `IF`. Elles sont souvent utilisées pour des indicateurs logiques (vrai/faux).\n\n**Exemple :**\n```\n01 EST-ADULTE PIC X(1) VALUE 'N'.\n```\nIci, `EST-ADULTE` est une variable qui stocke une valeur de type chaîne, et elle peut être utilisée dans une condition pour vérifier si une personne est adulte.\n\n### 5. **Variable de table (Tableau)**\nLes variables de table en COBOL sont utilisées pour stocker des collections de données de même type, comme un tableau. Elles sont déclarées dans la `Data Division` en utilisant les types de données définis précédemment, suivis d'un nombre pour indiquer la taille de la table.\n\n**Exemple :**\n```\n01 TABLE-AGE.\n   05 AGE OCCURS 10 TIMES PIC 9(2).\n```\nCet exemple déclare une table `AGE` qui peut contenir 10 éléments, chacun ayant une longueur de 2 chiffres.\n\n### 6. **Variable de groupe (Group Item)**\nLes variables de groupe permettent de regrouper plusieurs variables sous une même structure, ce qui facilite la gestion des données complexes. Elles sont déclarées avec le mot-clé `GROUP` et peuvent contenir des variables de différents types.\n\n**Exemple :**\n```\n01 CLIENT-INFO.\n   05 CLIENT-NAME PIC X(30).\n   05 CLIENT-AGE PIC 9(2).\n   05 CLIENT-ADDRESS PIC X(50).\n```\nIci, `CLIENT-INFO` est une variable de groupe qui contient plusieurs autres variables, comme `CLIENT-NAME`, `CLIENT-AGE`, et `CLIENT-ADDRESS`.\n\n### 7. **Variable de type numérique signé (Signed Numeric)**\nLes variables numériques signées sont utilisées pour stocker des valeurs numériques avec un signe (positif ou négatif). Elles sont définies à l'aide du caractère `S` dans leur déclaration.\n\n**Exemple :**\n```\n01 SOLDE-COURANT PIC S9(5)V99.\n```\nIci, `SOLDE-COURANT` est une variable qui peut contenir un nombre avec un signe, une partie entière de 5 chiffres et une partie décimale de 2 chiffres.\n\n### Conclusion\nLes variables en COBOL jouent un rôle clé dans la gestion des données dans un programme. Qu'il s'agisse de variables numériques, alphanumériques, conditionnelles ou de groupes, elles permettent de structurer les informations de manière claire et efficace pour une manipulation facile et précise des données.",
		"conclusions": "Les variables en COBOL permettent de stocker une large gamme de types de données, chacune adaptée à des besoins spécifiques. Grâce à des types bien définis et à une structure claire, les programmes COBOL peuvent manipuler efficacement des données complexes tout en garantissant la lisibilité et la maintenabilité du code.",
		"fin": "Ainsi, maîtriser les différentes variables du COBOL permet de structurer correctement les données et de développer des programmes modulaires, robustes et faciles à maintenir."
	},

	{
		"id": 4,
		"title": "Les conditions et boucles du COBOL",
		"subTitle": "Comprendre les structures conditionnelles et les boucles en COBOL",
		"intro": "Les conditions et boucles en COBOL permettent de contrôler l'exécution d'un programme en fonction de certaines conditions ou de répéter des actions. Ces structures sont essentielles pour la logique du programme. Voici une liste des principales structures conditionnelles et boucles en COBOL.",
		"article": "### 1. **La condition `IF`**\nLa structure `IF` en COBOL permet d'exécuter une ou plusieurs instructions si une condition est vraie. Elle peut être suivie de `ELSE` pour spécifier des instructions à exécuter si la condition est fausse.\n\n**Exemple :**\n```\nIF CLIENT-AGE > 18\n   DISPLAY 'Adult'.\nELSE\n   DISPLAY 'Minor'.\n```\nDans cet exemple, le programme affiche `Adult` si `CLIENT-AGE` est supérieur à 18, sinon il affiche `Minor`.\n\n### 2. **La condition `EVALUATE`**\nLa structure `EVALUATE` fonctionne de manière similaire à un `switch` ou `case` dans d'autres langages. Elle permet de tester une variable ou une expression contre plusieurs valeurs.\n\n**Exemple :**\n```\nEVALUATE CLIENT-AGE\n   WHEN 18\n      DISPLAY '18 years old'.\n   WHEN 19 TO 25\n      DISPLAY 'Young adult'.\n   WHEN OTHER\n      DISPLAY 'Other age'.\nEND-EVALUATE.\n```\nIci, `EVALUATE` teste la variable `CLIENT-AGE` et affiche un message spécifique selon la valeur de l'âge.\n\n### 3. **La condition `SEARCH`**\nLa structure `SEARCH` permet de rechercher un élément dans une table (tableau) et d'exécuter une action lorsque cet élément est trouvé.\n\n**Exemple :**\n```\nSEARCH CLIENT-AGE\n   WHEN AGE OF CLIENT-AGE = 18\n      DISPLAY 'Age is 18'.\n   WHEN OTHER\n      DISPLAY 'Age not found'.\nEND-SEARCH.\n```\nIci, la condition `SEARCH` est utilisée pour rechercher une valeur spécifique dans une table et exécuter un bloc d'instructions lorsque la condition est satisfaite.\n\n### 4. **La boucle `PERFORM`**\nLa structure `PERFORM` permet de répéter une ou plusieurs instructions. Elle peut être utilisée pour exécuter un bloc d'instructions plusieurs fois, soit un nombre fixe de fois, soit jusqu'à ce qu'une condition soit remplie.\n\n**Exemple :**\n```\nPERFORM DISPLAY-AGE VARYING CLIENT-AGE FROM 18 BY 1 UNTIL CLIENT-AGE > 25.\n```\nCet exemple montre une boucle `PERFORM` qui affiche l'âge à chaque itération, en commençant à 18 et en l'augmentant de 1 à chaque tour, jusqu'à ce que `CLIENT-AGE` soit supérieur à 25.\n\n### 5. **La boucle `PERFORM` avec une condition de fin**\nLa structure `PERFORM` peut aussi être utilisée avec une condition de fin spécifiée dans un bloc de code. Cela permet de répéter un bloc de code jusqu'à ce qu'une condition soit remplie.\n\n**Exemple :**\n```\nPERFORM UNTIL CLIENT-AGE > 18\n   ADD 1 TO CLIENT-AGE.\nEND-PERFORM.\n```\nIci, la boucle `PERFORM` continue d'exécuter l'instruction `ADD 1 TO CLIENT-AGE` jusqu'à ce que `CLIENT-AGE` soit supérieur à 18.\n\n### 6. **La boucle `GO TO`**\nLe mot-clé `GO TO` permet de sauter à une autre partie du programme, ce qui peut être utilisé pour simuler des boucles ou des sauts conditionnels.\n\n**Exemple :**\n```\nIF CLIENT-AGE < 18\n   GO TO MINOR.\nELSE\n   GO TO ADULT.\nMINOR.\n   DISPLAY 'Minor'.\n   STOP RUN.\nADULT.\n   DISPLAY 'Adult'.\n   STOP RUN.\n```\nCet exemple montre un `GO TO` qui dirige l'exécution vers des sections spécifiques en fonction de la valeur de `CLIENT-AGE`.\n\n### 7. **La condition `NOT`**\nEn COBOL, la condition `NOT` est utilisée pour inverser une condition, c'est-à-dire tester si une expression est fausse.\n\n**Exemple :**\n```\nIF NOT CLIENT-AGE > 18\n   DISPLAY 'Underage'.\nELSE\n   DISPLAY 'Adult'.\n```\nIci, la condition `NOT` permet de tester si `CLIENT-AGE` n'est pas supérieur à 18.\n\n### Conclusion\nLes structures conditionnelles et de boucle en COBOL offrent une grande flexibilité pour gérer la logique du programme. Elles permettent de tester des conditions et de répéter des actions en fonction de ces tests, assurant ainsi un contrôle précis du flux d'exécution du programme.",
		"conclusions": "Les conditions et boucles sont des éléments essentiels dans un programme COBOL, permettant de contrôler le flux d'exécution et de manipuler les données selon des critères définis. Que ce soit pour tester des conditions avec `IF` ou `EVALUATE`, ou répéter des actions avec `PERFORM`, ces structures permettent une gestion précise du comportement du programme.",
		"fin": "Ainsi, maîtriser les structures conditionnelles et de boucle en COBOL permet de développer des programmes plus dynamiques et réactifs aux différentes situations, tout en offrant une gestion efficace du flux d'exécution."
	},

	{
		"id": 5,
		"title": "Les conditions et boucles du COBOL",
		"subTitle": "Comprendre les structures conditionnelles et les boucles en COBOL",
		"intro": "Les conditions et boucles en COBOL permettent de contrôler l'exécution d'un programme en fonction de certaines conditions ou de répéter des actions. Ces structures sont essentielles pour la logique du programme. Voici une liste des principales structures conditionnelles et boucles en COBOL.",
		"article": "### 1. **La condition `IF`**\nLa structure `IF` en COBOL permet d'exécuter une ou plusieurs instructions si une condition est vraie. Elle peut être suivie de `ELSE` pour spécifier des instructions à exécuter si la condition est fausse.\n\n**Exemple :**\n```\nIF CLIENT-AGE > 18\n   DISPLAY 'Adult'.\nELSE\n   DISPLAY 'Minor'.\n```\nDans cet exemple, le programme affiche `Adult` si `CLIENT-AGE` est supérieur à 18, sinon il affiche `Minor`.\n\n### 2. **La condition `EVALUATE`**\nLa structure `EVALUATE` fonctionne de manière similaire à un `switch` ou `case` dans d'autres langages. Elle permet de tester une variable ou une expression contre plusieurs valeurs.\n\n**Exemple :**\n```\nEVALUATE CLIENT-AGE\n   WHEN 18\n      DISPLAY '18 years old'.\n   WHEN 19 TO 25\n      DISPLAY 'Young adult'.\n   WHEN OTHER\n      DISPLAY 'Other age'.\nEND-EVALUATE.\n```\nIci, `EVALUATE` teste la variable `CLIENT-AGE` et affiche un message spécifique selon la valeur de l'âge.\n\n### 3. **La condition `SEARCH`**\nLa structure `SEARCH` permet de rechercher un élément dans une table (tableau) et d'exécuter une action lorsque cet élément est trouvé.\n\n**Exemple :**\n```\nSEARCH CLIENT-AGE\n   WHEN AGE OF CLIENT-AGE = 18\n      DISPLAY 'Age is 18'.\n   WHEN OTHER\n      DISPLAY 'Age not found'.\nEND-SEARCH.\n```\nIci, la condition `SEARCH` est utilisée pour rechercher une valeur spécifique dans une table et exécuter un bloc d'instructions lorsque la condition est satisfaite.\n\n### 4. **La boucle `PERFORM`**\nLa structure `PERFORM` permet de répéter une ou plusieurs instructions. Elle peut être utilisée pour exécuter un bloc d'instructions plusieurs fois, soit un nombre fixe de fois, soit jusqu'à ce qu'une condition soit remplie.\n\n**Exemple :**\n```\nPERFORM DISPLAY-AGE VARYING CLIENT-AGE FROM 18 BY 1 UNTIL CLIENT-AGE > 25.\n```\nCet exemple montre une boucle `PERFORM` qui affiche l'âge à chaque itération, en commençant à 18 et en l'augmentant de 1 à chaque tour, jusqu'à ce que `CLIENT-AGE` soit supérieur à 25.\n\n### 5. **La boucle `PERFORM` avec une condition de fin**\nLa structure `PERFORM` peut aussi être utilisée avec une condition de fin spécifiée dans un bloc de code. Cela permet de répéter un bloc de code jusqu'à ce qu'une condition soit remplie.\n\n**Exemple :**\n```\nPERFORM UNTIL CLIENT-AGE > 18\n   ADD 1 TO CLIENT-AGE.\nEND-PERFORM.\n```\nIci, la boucle `PERFORM` continue d'exécuter l'instruction `ADD 1 TO CLIENT-AGE` jusqu'à ce que `CLIENT-AGE` soit supérieur à 18.\n\n### 6. **La boucle `GO TO`**\nLe mot-clé `GO TO` permet de sauter à une autre partie du programme, ce qui peut être utilisé pour simuler des boucles ou des sauts conditionnels.\n\n**Exemple :**\n```\nIF CLIENT-AGE < 18\n   GO TO MINOR.\nELSE\n   GO TO ADULT.\nMINOR.\n   DISPLAY 'Minor'.\n   STOP RUN.\nADULT.\n   DISPLAY 'Adult'.\n   STOP RUN.\n```\nCet exemple montre un `GO TO` qui dirige l'exécution vers des sections spécifiques en fonction de la valeur de `CLIENT-AGE`.\n\n### 7. **La condition `NOT`**\nEn COBOL, la condition `NOT` est utilisée pour inverser une condition, c'est-à-dire tester si une expression est fausse.\n\n**Exemple :**\n```\nIF NOT CLIENT-AGE > 18\n   DISPLAY 'Underage'.\nELSE\n   DISPLAY 'Adult'.\n```\nIci, la condition `NOT` permet de tester si `CLIENT-AGE` n'est pas supérieur à 18.\n\n### Conclusion\nLes structures conditionnelles et de boucle en COBOL offrent une grande flexibilité pour gérer la logique du programme. Elles permettent de tester des conditions et de répéter des actions en fonction de ces tests, assurant ainsi un contrôle précis du flux d'exécution du programme.",
		"conclusions": "Les conditions et boucles sont des éléments essentiels dans un programme COBOL, permettant de contrôler le flux d'exécution et de manipuler les données selon des critères définis. Que ce soit pour tester des conditions avec `IF` ou `EVALUATE`, ou répéter des actions avec `PERFORM`, ces structures permettent une gestion précise du comportement du programme.",
		"fin": "Ainsi, maîtriser les structures conditionnelles et de boucle en COBOL permet de développer des programmes plus dynamiques et réactifs aux différentes situations, tout en offrant une gestion efficace du flux d'exécution."
	},

	{
		"id": 6,
		"title": "Les contrôles de flux du COBOL",
		"subTitle": "Comprendre les mécanismes permettant de contrôler le flux d'exécution en COBOL",
		"intro": "Le contrôle de flux en COBOL est essentiel pour diriger l'exécution du programme en fonction de certaines conditions. Il permet d'exécuter, de sauter ou de répéter certaines instructions, garantissant ainsi un flux logique dans le programme. Voici une liste des principaux mécanismes de contrôle de flux en COBOL.",
		"article": "### 1. **La condition `IF`**\nLa structure `IF` permet d'exécuter un bloc d'instructions si une condition est vraie. Elle peut être accompagnée de `ELSE` pour spécifier un bloc d'instructions à exécuter si la condition est fausse.\n\n**Exemple :**\n```\nIF CLIENT-AGE > 18\n   DISPLAY 'Adult'.\nELSE\n   DISPLAY 'Minor'.\n```\nIci, si `CLIENT-AGE` est supérieur à 18, le programme affiche `Adult`, sinon il affiche `Minor`.\n\n### 2. **La condition `EVALUATE`**\nLa structure `EVALUATE` permet de tester une expression contre plusieurs valeurs possibles, fonctionnant comme un `switch` dans d'autres langages.\n\n**Exemple :**\n```\nEVALUATE CLIENT-AGE\n   WHEN 18\n      DISPLAY '18 years old'.\n   WHEN 19 TO 25\n      DISPLAY 'Young adult'.\n   WHEN OTHER\n      DISPLAY 'Other age'.\nEND-EVALUATE.\n```\nDans cet exemple, le programme teste la valeur de `CLIENT-AGE` et affiche un message en fonction de sa valeur.\n\n### 3. **La structure `SEARCH`**\n`SEARCH` permet de chercher un élément dans une table et d'exécuter un bloc d'instructions lorsque cet élément est trouvé.\n\n**Exemple :**\n```\nSEARCH CLIENT-AGE\n   WHEN AGE OF CLIENT-AGE = 18\n      DISPLAY 'Age is 18'.\n   WHEN OTHER\n      DISPLAY 'Age not found'.\nEND-SEARCH.\n```\nLa structure `SEARCH` permet de parcourir une collection de valeurs et d'exécuter des instructions en fonction des éléments trouvés.\n\n### 4. **Le contrôle de flux `PERFORM`**\nLa structure `PERFORM` permet d'exécuter un bloc d'instructions un certain nombre de fois ou jusqu'à ce qu'une condition soit remplie.\n\n**Exemple :**\n```\nPERFORM DISPLAY-AGE VARYING CLIENT-AGE FROM 18 BY 1 UNTIL CLIENT-AGE > 25.\n```\nIci, le programme effectue une boucle qui affiche l'âge, en l'augmentant de 1 à chaque itération, jusqu'à ce que `CLIENT-AGE` soit supérieur à 25.\n\n### 5. **La structure `GO TO`**\nLe contrôle de flux `GO TO` permet de sauter à une autre partie du programme. Bien qu'il soit moins recommandé dans les langages modernes, il peut encore être utile dans certains cas.\n\n**Exemple :**\n```\nIF CLIENT-AGE < 18\n   GO TO MINOR.\nELSE\n   GO TO ADULT.\nMINOR.\n   DISPLAY 'Minor'.\n   STOP RUN.\nADULT.\n   DISPLAY 'Adult'.\n   STOP RUN.\n```\nCet exemple montre comment utiliser `GO TO` pour diriger l'exécution vers des sections spécifiques du programme.\n\n### 6. **Les conditions de fin avec `NOT`**\nLe mot-clé `NOT` permet d'inverser une condition, en vérifiant si elle est fausse.\n\n**Exemple :**\n```\nIF NOT CLIENT-AGE > 18\n   DISPLAY 'Underage'.\nELSE\n   DISPLAY 'Adult'.\n```\nIci, la condition `NOT` teste si l'âge du client est inférieur ou égal à 18.\n\n### 7. **Le contrôle de flux `EXIT`**\nLa structure `EXIT` est utilisée pour sortir d'un programme ou d'un bloc de code avant que son exécution ne soit terminée.\n\n**Exemple :**\n```\nIF CLIENT-AGE < 18\n   DISPLAY 'Underage'.\n   EXIT.\nDISPLAY 'Next Step'.\n```\nIci, l'exécution du programme quitte immédiatement après l'affichage du message `Underage`, sans continuer avec la ligne `DISPLAY 'Next Step'`.\n\n### 8. **La boucle `DO`**\nLa structure `DO` permet de répéter un ensemble d'instructions jusqu'à ce qu'une condition soit remplie. Ce mécanisme est très utile pour les tâches répétitives.\n\n**Exemple :**\n```\nDO UNTIL CLIENT-AGE > 18\n   ADD 1 TO CLIENT-AGE.\nEND-DO.\n```\nLa boucle `DO` répète l'instruction `ADD 1 TO CLIENT-AGE` jusqu'à ce que `CLIENT-AGE` soit supérieur à 18.\n\n### Conclusion\nLes mécanismes de contrôle de flux en COBOL permettent de gérer la logique d'un programme en fonction des données et de la logique définies par le programmeur. Que ce soit pour tester des conditions avec `IF`, `EVALUATE`, ou répéter des actions avec `PERFORM`, ces structures assurent que le programme exécute les actions dans le bon ordre.",
		"conclusions": "Le contrôle du flux d'exécution est une partie fondamentale de la programmation en COBOL. Avec des structures comme `IF`, `PERFORM`, `EVALUATE`, et `GO TO`, un programmeur peut diriger l'exécution du programme en fonction de conditions spécifiques et garantir que l'ordre d'exécution suit la logique du problème à résoudre.",
		"fin": "Maîtriser les contrôles de flux en COBOL permet d'écrire des programmes plus complexes et dynamiques, capables de s'adapter à diverses situations en fonction des données traitées."
	},

	{
		"id": 7,
		"title": "Éléments supplémentaires du COBOL",
		"subTitle": "Description des autres éléments importants de COBOL pour compléter un programme",
		"intro": "En plus des structures de contrôle de flux et des instructions de base, le COBOL offre plusieurs autres éléments essentiels qui permettent d'écrire un programme complet. Voici une liste des éléments non encore abordés, qui sont essentiels pour gérer les fichiers, les données et l'interaction avec le programme.",
		"article": "### 1. **Les fichiers en COBOL (SECTION FILE)**\nLes fichiers sont un aspect fondamental de la programmation en COBOL, utilisés pour stocker et manipuler des données externes. Le COBOL permet de définir des fichiers dans la section `FILE` du programme et de les manipuler à travers des instructions spécifiques telles que `OPEN`, `READ`, `WRITE`, et `CLOSE`.\n\n**Exemple :**\n```\nSELECT CLIENT-FILE ASSIGN TO 'client.dat'.\nFD CLIENT-FILE.\n01 CLIENT-RECORD.\n   05 CLIENT-NAME     PIC X(30).\n   05 CLIENT-AGE      PIC 99.\n```\nDans cet exemple, un fichier externe `client.dat` est lié au programme, et la structure du fichier est définie avec des éléments comme `CLIENT-NAME` et `CLIENT-AGE`.\n\n### 2. **Les instructions de lecture et d'écriture des fichiers**\nUne fois qu'un fichier est ouvert, vous pouvez lire et écrire des données dans ce fichier en utilisant les verbes `READ`, `WRITE`, `REWRITE` et `DELETE`.\n\n**Exemple :**\n```\nOPEN INPUT CLIENT-FILE.\nREAD CLIENT-FILE INTO CLIENT-RECORD.\nIF CLIENT-AGE > 18 THEN\n   DISPLAY CLIENT-NAME.\n   WRITE CLIENT-RECORD.\nEND-IF.\nCLOSE CLIENT-FILE.\n```\nL'instruction `READ` permet de lire un enregistrement, `WRITE` d'ajouter un nouvel enregistrement, et `CLOSE` ferme le fichier après l'utilisation.\n\n### 3. **La gestion des exceptions (SECTION ERROR)**\nEn COBOL, la gestion des erreurs se fait principalement à travers la section `ERROR` où des conditions particulières peuvent être vérifiées.\n\n**Exemple :**\n```\nIF ERROR THEN\n   DISPLAY 'An error occurred'.\n   EXIT.\nEND-IF.\n```\nCette section permet de vérifier si une erreur s'est produite durant l'exécution d'une opération spécifique et d'exécuter des actions de secours, comme afficher un message d'erreur.\n\n### 4. **Les tables et tableaux en COBOL**\nLes tables (ou tableaux) en COBOL sont utilisés pour stocker des collections de données sous forme de listes. Elles sont définies dans la `DATA DIVISION` et peuvent être manipulées avec des instructions comme `SEARCH` ou `INSPECT`.\n\n**Exemple :**\n```\n01 CLIENT-TABLE.\n   05 CLIENT-ENTRY OCCURS 10 TIMES.\n      10 CLIENT-ID    PIC 9(4).\n      10 CLIENT-NAME  PIC X(30).\n```\nIci, un tableau `CLIENT-TABLE` est défini pour stocker jusqu'à 10 entrées, chaque entrée contenant un `CLIENT-ID` et un `CLIENT-NAME`.\n\n### 5. **Les instructions `INSPECT`**\nL'instruction `INSPECT` est utilisée pour analyser des chaînes de caractères et effectuer diverses opérations, telles que compter les occurrences d'un caractère ou remplacer un caractère spécifique.\n\n**Exemple :**\n```\nINSPECT CLIENT-NAME REPLACING ALL 'A' BY 'O'.\n```\nCette instruction remplace toutes les occurrences de la lettre 'A' dans `CLIENT-NAME` par la lettre 'O'.\n\n### 6. **Les constantes et littéraux (SECTION CONSTANT)**\nLes constantes en COBOL sont définies pour stocker des valeurs qui ne changent pas au cours de l'exécution du programme. Ces valeurs sont souvent utilisées dans des calculs ou des comparaisons.\n\n**Exemple :**\n```\n01 MAX-AGE        CONSTANT VALUE 100.\n```\nIci, `MAX-AGE` est une constante qui peut être utilisée tout au long du programme sans changer sa valeur.\n\n### 7. **Les champs de données numériques**\nEn COBOL, les données numériques sont définies avec des types de données comme `PIC 9` (pour les entiers) ou `PIC 9V99` (pour les décimales). Ces champs permettent d'effectuer des calculs mathématiques dans le programme.\n\n**Exemple :**\n```\n01 TOTAL-PRICE   PIC 9(5)V99.\n```\nIci, `TOTAL-PRICE` peut contenir une valeur numérique avec deux décimales.\n\n### 8. **Les zones de travail (Working-Storage)**\nLa `WORKING-STORAGE SECTION` est utilisée pour déclarer les variables et les zones de stockage temporaire utilisées pendant l'exécution du programme.\n\n**Exemple :**\n```\nWORKING-STORAGE SECTION.\n01 CLIENT-AGE     PIC 99.\n01 CLIENT-NAME    PIC X(30).\n```\nLa `WORKING-STORAGE` permet de déclarer des variables qui stockent des données temporaires durant l'exécution du programme.\n\n### 9. **Les sous-programmes et la structure `CALL`**\nLes sous-programmes en COBOL sont utilisés pour diviser le code en sections réutilisables. Le verbe `CALL` permet d'exécuter un sous-programme externe.\n\n**Exemple :**\n```\nCALL 'PROCESS-CLIENT' USING CLIENT-ID CLIENT-NAME.\n```\nIci, le sous-programme `PROCESS-CLIENT` est appelé avec les paramètres `CLIENT-ID` et `CLIENT-NAME`.\n\n### Conclusion\nLes éléments comme les fichiers, les erreurs, les tableaux, et les sous-programmes enrichissent les capacités du COBOL et permettent d'écrire des programmes puissants et structurés. La maîtrise de ces éléments permet de traiter des données complexes, de gérer des erreurs et d'interagir avec d'autres parties du système.",
		"conclusions": "En résumé, COBOL propose une grande variété de mécanismes pour manipuler des fichiers, gérer des erreurs, utiliser des tableaux et sous-programmes, et plus encore. Ces éléments sont essentiels pour créer des applications robustes et efficaces.",
		"fin": "Bien que COBOL puisse sembler complexe avec ses diverses structures et commandes, il reste une langue puissante pour gérer des données massives, en particulier dans les secteurs bancaires, d'assurance et gouvernementaux. La connaissance de ces éléments permet de développer des applications avancées et performantes."
	}
]
