[
	{
		"id": 1,
		"title": "Le fonctionnement du COBOL",
		"subTitle": "Explorez la structure et les principes du langage",
		"intro": "Le COBOL est un langage de programmation structuré, conçu pour la gestion des données et des processus métiers complexes. Sa robustesse repose sur une organisation claire et méthodique, qui facilite son usage dans les secteurs critiques comme la finance et l'administration.",
		"article": "### La structure d'un programme COBOL\nUn programme COBOL suit une organisation stricte divisée en plusieurs sections hiérarchisées :\n\n1. **Identification Division** : Fournit des informations générales sur le programme, comme son nom ou son auteur.\n2. **Environment Division** : Spécifie l'environnement d'exécution, incluant les fichiers et les périphériques utilisés.\n3. **Data Division** : Déclare toutes les variables, structures de données, et fichiers manipulés par le programme.\n4. **Procedure Division** : Contient les instructions qui exécutent la logique du programme.\n\n### Les principes de fonctionnement\n\n- **Traitement séquentiel des instructions** : COBOL exécute les instructions dans l'ordre où elles apparaissent dans la `Procedure Division`, sauf lorsqu'il y a des structures conditionnelles ou des boucles.\n\n- **Gestion des fichiers et des données** : COBOL excelle dans la gestion des fichiers et utilise des verbes comme `OPEN`, `READ`, `WRITE`, et `CLOSE` pour manipuler les données.\n\n- **Verbes et clauses spécifiques** : Les actions en COBOL sont décrites à l'aide de verbes, tels que `DISPLAY` pour afficher des données, ou `PERFORM` pour répéter des tâches. Des clauses comme `IF` et `EVALUATE` permettent de gérer les conditions et les alternatives.\n\n- **Orientation métier** : Grâce à sa syntaxe claire et descriptive, COBOL est particulièrement adapté pour les applications de gestion et les calculs complexes sur des ensembles de données volumineux.\n\n### Exemple de fonctionnement\nVoici un programme simple qui lit et affiche des données :\n```\n   IDENTIFICATION DIVISION.\n   PROGRAM-ID. ExempleLecture.\n   DATA DIVISION.\n   FILE SECTION.\n   FD FICHIER-CLIENT.\n   01 CLIENT-INFO.\n       05 NOM-CLIENT      PIC X(30).\n   PROCEDURE DIVISION.\n       OPEN INPUT FICHIER-CLIENT.\n       READ FICHIER-CLIENT INTO CLIENT-INFO.\n       DISPLAY 'Nom du client : ' NOM-CLIENT.\n       CLOSE FICHIER-CLIENT.\n       STOP RUN.\n```\nCe programme ouvre un fichier client, lit une entrée, et affiche le nom du client.",
		"conclusions": "Le fonctionnement du COBOL repose sur une structure rigoureuse et des concepts adaptés aux besoins métiers. Il est conçu pour traiter efficacement les grandes quantités de données et fournir des solutions fiables et pérennes.",
		"fin": "Malgré son ancienneté, le COBOL reste un outil clé dans les secteurs critiques grâce à sa structure claire et ses capacités puissantes. Il est un exemple de longévité dans l'industrie informatique."
	},

	{
		"id": 2,
		"title": "Les composants du COBOL",
		"subTitle": "Les éléments clés pour écrire un programme",
		"intro": "Le COBOL est un langage structuré en divisions, sections, et paragraphes, chacun jouant un rôle spécifique dans la construction d'un programme. Cette organisation modulaire permet de clarifier et structurer les responsabilités du code.",
		"article": "### Les principaux composants d’un programme COBOL\nUn programme COBOL est composé de quatre divisions principales, chacune ayant une fonction bien définie :\n\n1. **Identification Division** :\n   - Cette division contient des informations générales sur le programme, comme son nom et éventuellement l’auteur ou le projet auquel il appartient.\n   - Exemple :\n     ```\n     IDENTIFICATION DIVISION.\n     PROGRAM-ID. MonProgramme.\n     ```\n\n2. **Environment Division** :\n   - Elle décrit l’environnement d’exécution, spécifiant les fichiers ou les périphériques utilisés par le programme.\n   - Composée de deux sections principales :\n     - **Configuration Section** : Spécifie les paramètres de configuration.\n     - **Input-Output Section** : Décrit les fichiers utilisés.\n   - Exemple :\n     ```\n     ENVIRONMENT DIVISION.\n     INPUT-OUTPUT SECTION.\n     FILE-CONTROL.\n         SELECT FICHIER-CLIENT ASSIGN TO 'client.txt'.\n     ```\n\n3. **Data Division** :\n   - Déclare toutes les variables et structures de données nécessaires au programme.\n   - Contient plusieurs sections, comme :\n     - **File Section** : Décrit les fichiers utilisés.\n     - **Working-Storage Section** : Déclare les variables en mémoire.\n     - **Local-Storage Section** : Variables temporaires créées à chaque exécution du programme.\n   - Exemple :\n     ```\n     DATA DIVISION.\n     WORKING-STORAGE SECTION.\n     01 CLIENT-NOM PIC X(30).\n     ```\n\n4. **Procedure Division** :\n   - Contient les instructions qui définissent la logique du programme.\n   - Les blocs de code y sont organisés en paragraphes ou sections réutilisables.\n   - Exemple :\n     ```\n     PROCEDURE DIVISION.\n         DISPLAY 'Bonjour, COBOL !'.\n         STOP RUN.\n     ```\n\n### Autres éléments importants\n\n- **Clauses et verbes** : Les clauses définissent les conditions ou paramètres (par exemple, `VALUE`, `PIC`, `OCCURS`), et les verbes exécutent des actions (par exemple, `DISPLAY`, `MOVE`, `PERFORM`).\n- **Commentaires** : Ils permettent de documenter le code avec l’astérisque (`*`) au début d’une ligne.\n- **Syntaxe hiérarchique** : L’indentation améliore la lisibilité et montre les relations entre les blocs de code.\n\n### Exemple complet\nVoici un exemple qui combine tous ces composants :\n```\n   IDENTIFICATION DIVISION.\n   PROGRAM-ID. ExempleComplet.\n   ENVIRONMENT DIVISION.\n   INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT FICHIER-CLIENT ASSIGN TO 'client.txt'.\n   DATA DIVISION.\n   WORKING-STORAGE SECTION.\n       01 NOM-CLIENT PIC X(30).\n   PROCEDURE DIVISION.\n       DISPLAY 'Nom du client : ' NOM-CLIENT.\n       STOP RUN.\n```\n",
		"conclusions": "Chaque composant du COBOL joue un rôle essentiel dans la structure et le fonctionnement d’un programme. Cette organisation rigoureuse est l’une des raisons pour lesquelles COBOL reste un langage fiable et maintenable.",
		"fin": "Avec une compréhension claire des divisions et de leur rôle, écrire et maintenir un programme COBOL devient plus intuitif, même pour des systèmes complexes."
	},

	{
		"id": 3,
		"title": "La structure du code COBOL",
		"subTitle": "Décrire et expliquer la structure d'un programme COBOL à travers un exemple",
		"intro": "Le COBOL suit une structure bien définie, divisée en différentes sections et divisions. Chacune de ces parties a une fonction spécifique et doit être respectée pour que le programme fonctionne correctement. Voici une explication détaillée de cette structure à partir d’un exemple.",
		"article": "### Structure d’un programme COBOL\nUn programme COBOL est divisé en plusieurs divisions et sections, qui doivent être organisées dans un ordre spécifique pour assurer son bon fonctionnement. Voici une analyse détaillée d'un exemple de programme COBOL.\n\n#### Exemple de programme COBOL :\n```\n   IDENTIFICATION DIVISION.\n   PROGRAM-ID. ExempleStructure.\n\n   ENVIRONMENT DIVISION.\n   INPUT-OUTPUT SECTION.\n       FILE-CONTROL.\n           SELECT FICHIER-CLIENT ASSIGN TO 'client.txt'.\n\n   DATA DIVISION.\n   FILE SECTION.\n       FD FICHIER-CLIENT.\n       01 CLIENT-ENREGISTREMENT.\n           05 NOM-CLIENT PIC X(30).\n           05 AGE-CLIENT PIC 99.\n   WORKING-STORAGE SECTION.\n       01 MESSAGE-CONFIRMATION PIC X(50) VALUE 'Client enregistré avec succès'.\n\n   PROCEDURE DIVISION.\n       OPEN INPUT FICHIER-CLIENT.\n       READ FICHIER-CLIENT INTO CLIENT-ENREGISTREMENT.\n       DISPLAY 'Nom : ' NOM-CLIENT.\n       DISPLAY 'Age : ' AGE-CLIENT.\n       DISPLAY MESSAGE-CONFIRMATION.\n       CLOSE FICHIER-CLIENT.\n       STOP RUN.\n```\n\n### Explication de la structure du programme COBOL\n\n1. **Identification Division** :\n   - C'est la première division du programme. Elle sert à définir des informations d’identification, comme le nom du programme.\n   - Dans l'exemple, `PROGRAM-ID. ExempleStructure` définit le nom du programme.\n\n2. **Environment Division** :\n   - Cette division définit l’environnement dans lequel le programme fonctionne, y compris les périphériques et fichiers utilisés.\n   - La section `INPUT-OUTPUT SECTION` décrit ici le fichier `client.txt` qui est utilisé pour stocker les informations des clients.\n\n3. **Data Division** :\n   - C'est l'une des divisions les plus importantes, où les variables et structures de données sont définies. Elle contient différentes sections :\n     - **File Section** : Déclare les fichiers utilisés dans le programme. Ici, `FICHIER-CLIENT` est défini avec les détails des enregistrements à lire.\n     - **Working-Storage Section** : Déclare des variables temporaires utilisées pendant l'exécution du programme. Par exemple, `MESSAGE-CONFIRMATION` est une variable contenant un message de confirmation.\n\n4. **Procedure Division** :\n   - C'est la partie du programme où les actions réelles sont exécutées. Elle contient les instructions et la logique qui manipulent les données.\n   - Dans cet exemple, on ouvre un fichier avec `OPEN INPUT FICHIER-CLIENT`, puis on lit des données avec `READ`. Ensuite, les données sont affichées à l'utilisateur avec `DISPLAY`, et le fichier est fermé avec `CLOSE`.\n\n### Conclusion\nLe programme COBOL suit une structure très stricte qui est essentielle pour garantir une lisibilité et une maintenabilité optimales. La séparation des responsabilités entre les différentes divisions permet une organisation claire du code, facilitant ainsi la gestion des données et des fichiers tout en garantissant des opérations fiables.",
		"conclusions": "La structure d’un programme COBOL, bien que rigide, permet une gestion très précise des données, avec une séparation nette entre l’identification, l’environnement, les données et la logique de traitement. Cette organisation claire rend le code plus facile à maintenir et à comprendre.",
		"fin": "Ainsi, comprendre la structure du code COBOL permet de mieux appréhender l’organisation des programmes et d’améliorer leur gestion à long terme."
	},

	{
		"id": 4,
		"title": "Les variables en COBOL",
		"subTitle": "Comprendre les différents types de variables et leur utilisation",
		"intro": "Les variables en COBOL sont des éléments essentiels pour stocker et manipuler des données. Le langage offre une grande flexibilité dans la définition des variables, permettant de spécifier leur type, leur taille et leur format. Voici une liste et une explication des principales variables utilisées dans un programme COBOL.",
		"article": "### Types de variables en COBOL\nEn COBOL, les variables sont définies dans la **Data Division** et peuvent avoir différents types et formats, selon les besoins du programme. Voici une présentation des principaux types de variables.\n\n#### 1. **Variables de type alphanumérique (PIC X)**\nLes variables de type alphanumérique sont utilisées pour stocker des chaînes de caractères, comme des noms ou des adresses.\n\n**Exemple :**\n```\n01 NOM-CLIENT PIC X(30).\n```\nCela signifie que la variable `NOM-CLIENT` peut contenir une chaîne de 30 caractères.\n\n#### 2. **Variables numériques (PIC 9)**\nLes variables numériques sont utilisées pour stocker des chiffres. Elles peuvent avoir différents formats, comme des entiers ou des nombres décimaux.\n\n**Exemple :**\n```\n01 AGE-CLIENT PIC 99.\n```\nCette déclaration crée une variable `AGE-CLIENT` qui peut contenir un nombre entier allant de 00 à 99.\n\n#### 3. **Variables numériques avec décimales (PIC 9.99)**\nLes variables numériques avec décimales permettent de stocker des nombres avec une partie décimale.\n\n**Exemple :**\n```\n01 MONTANT-ACHAT PIC 9(5)V99.\n```\nCette variable `MONTANT-ACHAT` peut contenir un nombre avec 5 chiffres avant la virgule et 2 chiffres après la virgule (par exemple : `12345.99`). Le `V` indique que la virgule (séparateur décimal) n'est pas explicitement stockée.\n\n#### 4. **Variables conditionnelles (S)**\nLes variables conditionnelles sont utilisées pour indiquer si une variable est négative ou positive.\n\n**Exemple :**\n```\n01 SOLDE-COMPTE PIC S9(5)V99.\n```\nCette variable `SOLDE-COMPTE` peut être un nombre avec un signe, indiquant si le solde est positif ou négatif.\n\n#### 5. **Variables de type date et heure (PIC X ou 9 avec format spécifique)**\nLes dates et heures peuvent être stockées sous forme de chaînes de caractères ou de nombres.\n\n**Exemple :**\n```\n01 DATE-ENREGISTREMENT PIC X(10).\n```\nCela permet de stocker une date sous la forme `JJ/MM/AAAA`.\n\n#### 6. **Variables de tableau (Table)**\nLes tableaux en COBOL permettent de définir des collections de données similaires. Chaque élément du tableau est défini comme une variable individuelle.\n\n**Exemple :**\n```\n01 TABL-CLIENTS.\n   05 CLIENT-ENTREE OCCURS 10 TIMES.\n      10 CLIENT-NAME PIC X(30).\n      10 CLIENT-AGE  PIC 99.\n```\nIci, `TABL-CLIENTS` est un tableau de 10 entrées, chaque entrée ayant un nom et un âge associés.\n\n### Conclusion\nLes variables en COBOL jouent un rôle central dans la gestion des données. Leur structure détaillée permet de définir précisément leur type et leur format, ce qui assure une gestion fiable et lisible des informations dans les programmes. En comprenant comment déclarer et utiliser les différentes variables en COBOL, les développeurs peuvent gérer efficacement les données tout au long du programme.",
		"conclusions": "Les variables en COBOL offrent une grande souplesse et permettent de manipuler des données avec précision. En définissant correctement les types de variables et en respectant les formats adéquats, il devient possible de gérer efficacement des informations complexes, tout en garantissant la lisibilité et la maintenabilité du code.",
		"fin": "En somme, comprendre les variables en COBOL est essentiel pour écrire des programmes solides et bien structurés, capables de traiter des données de manière fiable."
	},

	{
		"id": 5,
		"title": "Les éléments avancés du COBOL",
		"subTitle": "Maîtriser les concepts avancés pour écrire un programme performant",
		"intro": "Le COBOL, bien que traditionnel, offre des fonctionnalités avancées qui permettent de créer des programmes robustes et performants. Ces fonctionnalités permettent de gérer des structures complexes, de traiter des fichiers de manière efficace et d'introduire des concepts de programmation modernes comme la programmation orientée objet. Voici une liste des principaux éléments avancés du COBOL et leur explication.",
		"article": "### 1. **La programmation orientée objet (POO) en COBOL**\nCOBOL a évolué au fil des ans pour inclure des concepts de programmation orientée objet, introduits avec la norme COBOL 2002. Cela permet de créer des classes, des objets et de gérer l'encapsulation, l'héritage et le polymorphisme.\n\n**Exemple :**\n```\nCLASS-ID. Vehicule.\n   METHOD-ID. AfficherDetails.\n   PROCEDURE DIVISION.\n      DISPLAY 'Détails du véhicule'.\n   END METHOD.\nEND CLASS.\n```\nCet exemple montre comment définir une classe `Vehicule` et un de ses méthodes `AfficherDetails` qui affiche des informations sur le véhicule.\n\n### 2. **Les fichiers séquentiels et indexés**\nLe COBOL offre un puissant mécanisme pour traiter les fichiers. Les fichiers peuvent être séquentiels (où les données sont lues ou écrites dans un ordre linéaire) ou indexés (permettant un accès rapide aux enregistrements via des index).\n\n**Exemple de fichier séquentiel :**\n```\nSELECT FICHIER-SEQUENCE ASSIGN TO 'fichier.dat'.\n```\nLes fichiers séquentiels sont utilisés pour gérer des données simples, tandis que les fichiers indexés permettent d'effectuer des recherches rapides dans de grandes bases de données.\n\n### 3. **Les tables et structures complexes (ARRAY)**\nCOBOL permet la gestion de tables (ou tableaux) qui peuvent contenir plusieurs entrées de type similaire. Les tables peuvent être dynamiques, avec des tailles ajustables en fonction des besoins.\n\n**Exemple :**\n```\n01 CLIENTS-TABLE.\n   05 CLIENT OCCURS 10 TIMES.\n      10 CLIENT-NAME PIC X(30).\n      10 CLIENT-AGE PIC 99.\n```\nIci, `CLIENTS-TABLE` est un tableau qui peut contenir 10 enregistrements, chaque enregistrement ayant un nom et un âge.\n\n### 4. **Les instructions EVALUATE (équivalent du switch-case)**\nL'instruction `EVALUATE` est une structure conditionnelle puissante qui permet de tester plusieurs conditions de manière claire et concise, semblable au `switch-case` d'autres langages.\n\n**Exemple :**\n```\nEVALUATE TRUE\n   WHEN AGE-CLIENT < 18\n      DISPLAY 'Mineur'.\n   WHEN AGE-CLIENT >= 18 AND AGE-CLIENT < 65\n      DISPLAY 'Adulte'.\n   WHEN OTHER\n      DISPLAY 'Senior'.\nEND-EVALUATE.\n```\nL'instruction `EVALUATE` permet de tester plusieurs conditions en un seul bloc, ce qui améliore la lisibilité du code.\n\n### 5. **Les exceptions et gestion des erreurs (EXIT, CONTINUE)**\nCOBOL permet de gérer les erreurs et les exceptions dans les programmes. L'instruction `EXIT` est utilisée pour quitter une boucle ou une procédure, tandis que `CONTINUE` permet de passer à l'itération suivante d'une boucle.\n\n**Exemple :**\n```\nPERFORM VARYING I FROM 1 BY 1 UNTIL I > 10\n   IF I = 5 THEN\n      CONTINUE.\n   END-IF.\n   DISPLAY I.\nEND-PERFORM.\n```\nDans cet exemple, lorsque `I` est égal à 5, l'instruction `CONTINUE` passe à l'itération suivante sans exécuter le `DISPLAY`.\n\n### 6. **Les pointeurs et l'accès direct à la mémoire**\nBien que le COBOL ne soit pas un langage à bas niveau, il permet un certain accès direct à la mémoire, ce qui est utile pour des applications spécifiques, comme la gestion de bases de données volumineuses.\n\n### Conclusion\nLes éléments avancés du COBOL permettent d'élargir les capacités du langage pour traiter des problèmes complexes. La programmation orientée objet, la gestion des fichiers, des tableaux, ainsi que la gestion des exceptions, offrent une flexibilité qui permet d’écrire des programmes performants, fiables et faciles à maintenir.",
		"conclusions": "Les fonctionnalités avancées du COBOL, comme la programmation orientée objet et la gestion des fichiers complexes, permettent de répondre aux défis modernes de la programmation tout en préservant les caractéristiques de lisibilité et de robustesse qui ont fait le succès de ce langage.",
		"fin": "Ainsi, maîtriser les éléments avancés du COBOL permet de développer des solutions performantes et évolutives dans des secteurs critiques, tout en respectant les normes de qualité et de maintenance."
	}
]
